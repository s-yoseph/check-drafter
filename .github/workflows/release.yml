name: Release Drafter and Publisher
on:
  push:
    branches:
      - develop
  pull_request_target:
    types: [opened, reopened, synchronize, closed]
    branches:
      - develop
permissions:
  contents: write
  pull-requests: write
jobs:
  update_release_draft:
    runs-on: ubuntu-latest
    steps:
      - name: Check PR labels
        if: github.event_name == 'pull_request_target'
        run: |
          LABELS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/labels | jq -r '.[].name')
          if [[ ! $LABELS =~ (Major|Feature|Bug|Hot Fix|Task|Security) ]]; then
            echo "No valid labels found, skipping release-drafter"
            exit 0
          fi
      - uses: release-drafter/release-drafter@v6
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  publish_draft:
    if: >
      github.event_name == 'pull_request_target' &&
      github.event.action == 'closed' &&
      github.event.pull_request.merged == true &&
      contains(github.event.pull_request.labels.*.name, 'Publish')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Publish latest draft release
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const draft = releases.data.find(r => r.draft);
            if (!draft) {
              core.setFailed("No draft release found to publish.");
              return;
            }
            try {
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: draft.id,
                draft: false,
                prerelease: false
              });
              console.log(`âœ… Draft release "${draft.tag_name}" published!`);
            } catch (error) {
              core.setFailed(`Failed to publish release: ${error.message}`);
            }
